generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  WORKER
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  phone         String
  password_hash String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  Schedule      Schedule[]
  Rate          Rate[]

  @@map("users")
}

model BarberShop {
  id            String          @id @default(uuid())
  cpf           String          @unique
  logo_url      String
  name          String
  address       String
  city          String
  plan          String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  Professional  Professional[]
  Schedule      Schedule[]
  Rate          Rate[]
  Service       Service[]
  AvailableTime AvailableTime[]

  @@map("barber_shops")
}

model AvailableTime {
  id           String     @id @default(uuid())
  label        String
  day_of_week  String
  barber_shops BarberShop @relation(fields: [barberShopId], references: [id])
  barberShopId String
  Schedule     Schedule[]

  @@map("available_times")
}

model Professional {
  id            String @id @default(uuid())
  name          String
  phone         String
  email         String @unique
  password_hash String
  role          Role   @default(ADMIN)

  Schedule     Schedule[]
  BarberShop   BarberShop? @relation(fields: [barberShopId], references: [id])
  barberShopId String?

  @@map("professionals")
}

model Schedule {
  id   String   @id @default(uuid())
  date DateTime

  services      Service       @relation(fields: [serviceId], references: [id])
  barber_shop   BarberShop    @relation(fields: [barberShopId], references: [id])
  users         User          @relation(fields: [userId], references: [id])
  professionals Professional  @relation(fields: [professionalId], references: [id])
  availableTime AvailableTime @relation(fields: [availableTimeId], references: [id])

  serviceId       String
  barberShopId    String
  userId          String
  professionalId  String
  clientPhone     String
  availableTimeId String

  @@map("schedules")
}

model Rate {
  id     String @id @default(uuid())
  amount Float

  users        User       @relation(fields: [userId], references: [id])
  barber_shop  BarberShop @relation(fields: [barberShopId], references: [id])
  userId       String
  barberShopId String

  @@map("rates")
}

model Service {
  id           String     @id @default(uuid())
  name         String
  price_cents  Int
  Schedule     Schedule[]
  barber_shop  BarberShop @relation(fields: [barberShopId], references: [id])
  barberShopId String

  @@map("services")
}
